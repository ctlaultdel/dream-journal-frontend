{"ast":null,"code":"var _jsxFileName = \"/Users/lollapalarza/ada/projects/smart-dream-journal/smart-dream-journal-frontend/src/components/profile/journal/journal.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../../../contexts/authContext\";\nimport NewEntryPopup from \"./newEntryForm\";\nimport \"./journal.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Journal() {\n  _s();\n  const navigate = useNavigate();\n  // contexts\n  const {\n    tokenHeader,\n    setUserEntries,\n    userEntries\n  } = useAuth();\n\n  // journal form entry states\n  const [date, setDate] = useState(Date.now());\n  const [title, setTitle] = useState(\"\");\n  const [keywords, setKeyWords] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [mood, setMood] = useState(\"\");\n  const [trigger, setTrigger] = useState(false);\n\n  //      `https://git.heroku.com/smart-dream-journal-frontend.git/profile/journal`,\n\n  // Function for API post request for new entry\n  async function postNewEntry(entryStates) {\n    return await fetch(`http://127.0.0.1:5000/profile/journal`, {\n      mode: \"no-cors\",\n      method: \"POST\",\n      headers: {\n        ...tokenHeader,\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(entryStates)\n    }).then(response => {\n      return response.json();\n    }).catch(error => console.log(error));\n  }\n\n  // event handler for new journal entry form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const newEntry = await postNewEntry({\n      title,\n      keywords,\n      description,\n      mood,\n      date\n    });\n    // update the local storage USERENTRIES to add new journal entry\n    const entries = [...userEntries, ...newEntry];\n    localStorage.setItem(\"USERENTRIES\", JSON.stringify(entries));\n    setUserEntries(JSON.parse(localStorage.getItem(\"USERENTRIES\")));\n    setTrigger(false);\n    navigate(\"/profile\");\n  };\n  const cancelPost = () => {\n    setTrigger(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center mt-5\",\n      children: \"Journal Entries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"post-button\",\n        onClick: e => setTrigger(true),\n        children: \"Post New Journal Entry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NewEntryPopup, {\n      trigger: trigger,\n      handleSubmit: handleSubmit,\n      cancelPost: cancelPost,\n      setDate: setDate,\n      setTitle: setTitle,\n      setKeyWords: setKeyWords,\n      setDescription: setDescription,\n      setMood: setMood\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(Journal, \"Pf1ZvjPrUBbh+USPPfRmhxzE3uE=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = Journal;\nexport default Journal;\nvar _c;\n$RefreshReg$(_c, \"Journal\");","map":{"version":3,"names":["React","useState","Outlet","useNavigate","useAuth","NewEntryPopup","jsxDEV","_jsxDEV","Journal","_s","navigate","tokenHeader","setUserEntries","userEntries","date","setDate","Date","now","title","setTitle","keywords","setKeyWords","description","setDescription","mood","setMood","trigger","setTrigger","postNewEntry","entryStates","fetch","mode","method","headers","body","JSON","stringify","then","response","json","catch","error","console","log","handleSubmit","e","preventDefault","newEntry","entries","localStorage","setItem","parse","getItem","cancelPost","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/lollapalarza/ada/projects/smart-dream-journal/smart-dream-journal-frontend/src/components/profile/journal/journal.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\nimport { useAuth } from \"../../../contexts/authContext\";\nimport NewEntryPopup from \"./newEntryForm\";\nimport \"./journal.css\";\n\nfunction Journal() {\n  const navigate = useNavigate();\n  // contexts\n  const { tokenHeader, setUserEntries, userEntries } = useAuth();\n\n  // journal form entry states\n  const [date, setDate] = useState(Date.now());\n  const [title, setTitle] = useState(\"\");\n  const [keywords, setKeyWords] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [mood, setMood] = useState(\"\");\n  const [trigger, setTrigger] = useState(false);\n\n  //      `https://git.heroku.com/smart-dream-journal-frontend.git/profile/journal`,\n\n  // Function for API post request for new entry\n  async function postNewEntry(entryStates) {\n    return await fetch(`http://127.0.0.1:5000/profile/journal`, {\n      mode: \"no-cors\",\n      method: \"POST\",\n      headers: {\n        ...tokenHeader,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(entryStates),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .catch((error) => console.log(error));\n  }\n\n  // event handler for new journal entry form submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const newEntry = await postNewEntry({\n      title,\n      keywords,\n      description,\n      mood,\n      date,\n    });\n    // update the local storage USERENTRIES to add new journal entry\n    const entries = [...userEntries, ...newEntry];\n    localStorage.setItem(\"USERENTRIES\", JSON.stringify(entries));\n    setUserEntries(JSON.parse(localStorage.getItem(\"USERENTRIES\")));\n    setTrigger(false);\n    navigate(\"/profile\");\n  };\n\n  const cancelPost = () => {\n    setTrigger(false);\n  };\n\n  return (\n    <section>\n      <h1 className=\"text-center mt-5\">Journal Entries</h1>\n      <section>\n        <button className=\"post-button\" onClick={(e) => setTrigger(true)}>\n          Post New Journal Entry\n        </button>\n      </section>\n      <NewEntryPopup\n        trigger={trigger}\n        handleSubmit={handleSubmit}\n        cancelPost={cancelPost}\n        setDate={setDate}\n        setTitle={setTitle}\n        setKeyWords={setKeyWords}\n        setDescription={setDescription}\n        setMood={setMood}\n      />\n      <Outlet />\n    </section>\n  );\n}\n\nexport default Journal;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}